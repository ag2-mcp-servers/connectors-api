# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:32:30+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class Empty(BaseModel):
    pass


class Entity(BaseModel):
    fields: Optional[Dict[str, Any]] = Field(
        None,
        description='Fields of the entity. The key is name of the field and the value contains the applicable `google.protobuf.Value` entry for this field.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name of the Entity. Format: projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}',
    )


class ExecuteActionRequest(BaseModel):
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description='Parameters for executing the action. The parameters can be key/value pairs or nested structs.',
    )


class ExecuteActionResponse(BaseModel):
    results: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="In the case of successful invocation of the specified action, the results Struct contains values based on the response of the action invoked. 1. If the action execution produces any entities as a result, they are returned as an array of Structs with the 'key' being the field name and the 'value' being the value of that field in each result row. { 'results': [{'key': 'value'}, ...] }",
    )


class ExecuteSqlQueryResponse(BaseModel):
    results: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='In the case of successful execution of the query the response contains results returned by the external system. For example, the result rows of the query are contained in the \'results\' Struct list - "results": [ { "field1": "val1", "field2": "val2",.. },.. ] Each Struct row can contain fields any type of like nested Structs or lists.',
    )


class DataType(Enum):
    DATA_TYPE_UNSPECIFIED = 'DATA_TYPE_UNSPECIFIED'
    INT = 'INT'
    SMALLINT = 'SMALLINT'
    DOUBLE = 'DOUBLE'
    DATE = 'DATE'
    DATETIME = 'DATETIME'
    TIME = 'TIME'
    STRING = 'STRING'
    LONG = 'LONG'
    BOOLEAN = 'BOOLEAN'
    DECIMAL = 'DECIMAL'
    UUID = 'UUID'
    BLOB = 'BLOB'
    BIT = 'BIT'
    TINYINT = 'TINYINT'
    INTEGER = 'INTEGER'
    BIGINT = 'BIGINT'
    FLOAT = 'FLOAT'
    REAL = 'REAL'
    NUMERIC = 'NUMERIC'
    CHAR = 'CHAR'
    VARCHAR = 'VARCHAR'
    LONGVARCHAR = 'LONGVARCHAR'
    TIMESTAMP = 'TIMESTAMP'
    NCHAR = 'NCHAR'
    NVARCHAR = 'NVARCHAR'
    LONGNVARCHAR = 'LONGNVARCHAR'
    NULL = 'NULL'
    OTHER = 'OTHER'
    JAVA_OBJECT = 'JAVA_OBJECT'
    DISTINCT = 'DISTINCT'
    STRUCT = 'STRUCT'
    ARRAY = 'ARRAY'
    CLOB = 'CLOB'
    REF = 'REF'
    DATALINK = 'DATALINK'
    ROWID = 'ROWID'
    BINARY = 'BINARY'
    VARBINARY = 'VARBINARY'
    LONGVARBINARY = 'LONGVARBINARY'
    NCLOB = 'NCLOB'
    SQLXML = 'SQLXML'
    REF_CURSOR = 'REF_CURSOR'
    TIME_WITH_TIMEZONE = 'TIME_WITH_TIMEZONE'
    TIMESTAMP_WITH_TIMEZONE = 'TIMESTAMP_WITH_TIMEZONE'


class InputParameter(BaseModel):
    dataType: Optional[DataType] = Field(
        None, description='The data type of the Parameter'
    )
    defaultValue: Optional[Any] = Field(
        None,
        description='The following field specifies the default value of the Parameter provided by the external system if a value is not provided.',
    )
    description: Optional[str] = Field(
        None, description='A brief description of the Parameter.'
    )
    name: Optional[str] = Field(None, description='Name of the Parameter.')
    nullable: Optional[bool] = Field(
        None, description='Specifies whether a null value is allowed.'
    )


class ListEntitiesResponse(BaseModel):
    entities: Optional[List[Entity]] = Field(
        None, description='List containing entity rows.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Next page token if more records are available.'
    )


class Query(BaseModel):
    query: Optional[str] = Field(None, description='Required. Sql query to execute.')


class Reference(BaseModel):
    name: Optional[str] = Field(None, description='Name of the reference field.')
    type: Optional[str] = Field(None, description='Name of reference entity type.')


class ResultMetadata(BaseModel):
    dataType: Optional[DataType] = Field(
        None, description='The data type of the metadata field'
    )
    description: Optional[str] = Field(
        None, description='A brief description of the metadata field.'
    )
    name: Optional[str] = Field(None, description='Name of the metadata field.')


class UpdateEntitiesWithConditionsResponse(BaseModel):
    response: Optional[Dict[str, Any]] = Field(
        None, description='Response returned by the external system.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class SortBy(RootModel[List[str]]):
    root: List[str]


class Action(BaseModel):
    inputParameters: Optional[List[InputParameter]] = Field(
        None, description='List containing input parameter metadata.'
    )
    name: Optional[str] = Field(None, description='Name of the action.')
    resultMetadata: Optional[List[ResultMetadata]] = Field(
        None, description='List containing the metadata of result fields.'
    )


class ExecuteSqlQueryRequest(BaseModel):
    query: Optional[Query] = Field(
        None,
        description='Required. SQL statement passed by clients like Integration Platform, the query is passed as-is to the driver used for interfacing with external systems.',
    )


class FieldModel(BaseModel):
    additionalDetails: Optional[Dict[str, Any]] = Field(
        None,
        description='The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.',
    )
    dataType: Optional[DataType] = Field(
        None, description='The data type of the Field.'
    )
    defaultValue: Optional[Any] = Field(
        None,
        description='The following field specifies the default value of the Field provided by the external system if a value is not provided.',
    )
    description: Optional[str] = Field(
        None, description='A brief description of the Field.'
    )
    key: Optional[bool] = Field(
        None,
        description='The following boolean field specifies if the current Field acts as a primary key or id if the parent is of type entity.',
    )
    name: Optional[str] = Field(None, description='Name of the Field.')
    nullable: Optional[bool] = Field(
        None, description='Specifies whether a null value is allowed.'
    )
    reference: Optional[Reference] = Field(
        None,
        description='Reference captures the association between two different entity types. Value links to the reference of another entity type.',
    )


class ListActionsResponse(BaseModel):
    actions: Optional[List[Action]] = Field(
        None, description='List of action metadata.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Next page token if more actions available.'
    )
    unsupportedActionNames: Optional[List[str]] = Field(
        None,
        description='List of actions which contain unsupported Datatypes. Check datatype.proto for more information.',
    )


class EntityType(BaseModel):
    fields: Optional[List[FieldModel]] = Field(
        None,
        description='List containing metadata information about each field of the entity type.',
    )
    name: Optional[str] = Field(None, description='The name of the entity type.')


class ListEntityTypesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Next page token if more entity types available.'
    )
    types: Optional[List[EntityType]] = Field(
        None, description='List of metadata related to all entity types.'
    )
    unsupportedTypeNames: Optional[List[str]] = Field(
        None,
        description='List of entity type names which contain unsupported Datatypes. Check datatype.proto for more information.',
    )
